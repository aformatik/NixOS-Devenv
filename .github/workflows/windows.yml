name: build-windows
on:
  push:
    tags:
      - "v*.*.*"

permissions:
  contents: read

jobs:
  build-windows:
    defaults:
      run:
        working-directory: cli
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: haskell/actions/setup@v2
        id: setup
        with:
          ghc-version: 9.2
          # Defaults, added for clarity:
          # cabal-version: 'latest'
          # cabal-update: true

      - run: |
          cabal configure --enable-tests --enable-benchmarks --disable-documentation
          cabal build --dry-run
        # The last step generates dist-newstyle/cache/plan.json for the cache key.

      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}
          restore-keys: ${{ env.key }}

      - name: Install dependencies
        run: cabal build all --only-dependencies

      # Cache dependencies already here, so that we do not have to rebuild them should the subsequent steps fail.
      - uses: actions/cache/save@v3
        # Caches are immutable, trying to save with the same key would error.
        if: ${{ steps.cache.outputs.cache-primary-key != steps.cache.outputs.cache-matched-key }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      - name: Build
        run: |
          Set-PSDebug -Trace 1
          cabal build all
          mv "$((Get-ChildItem -Filter codchi.exe -Recurse).fullname)" ..
      - name: Compress binaries
        uses: svenstaro/upx-action@v2
        with:
          files: |
            codchi.exe
      - name: Temporarily save artifacts
        uses: actions/upload-artifact@v3
        with:
          name: codchi.exe
          path: codchi.exe
          retention-days: 1
          if-no-files-found: error
  nix:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: cachix/install-nix-action@v22
      with:
        github_access_token: ${{ secrets.GITHUB_TOKEN }}
    - uses: DeterminateSystems/magic-nix-cache-action@main
    - uses: cachix/cachix-action@v12
      with:
        name: nixos-devenv
        authToken: '${{ secrets.CACHIX_AUTH_TOKEN }}'
    - run: |
        nix build .#wsl-ctrl-rootfs
        cp  result/controller.tar.gz controller.tar.gz
    - name: Temporarily save artifacts
      uses: actions/upload-artifact@v3
      with:
          name: controller.tar.gz
          path: controller.tar.gz
          retention-days: 1
          if-no-files-found: error
  msix:
    name: Package MSIX package
    runs-on: windows-latest
    needs: 
      - build-windows
      - nix
    permissions:
      contents: write
    env:
      WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
      WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
    steps:
      - uses: actions/checkout@v3
        with:
          repository: 'aformatik/codchi-packaging'

      - name: Retrieve codchi.exe
        uses: actions/download-artifact@v3
        with:
          name: codchi.exe
          path: msix
      - name: Retrieve controller.tar.gz
        uses: actions/download-artifact@v3
        with:
          name: controller.tar.gz
          path: msix/VFS/Common AppData/codchi

      - name: import windows certificate
        run: |
          New-Item -ItemType directory -Path certificate
          Set-Content -Path certificate/tempCert.txt -Value $env:WINDOWS_CERTIFICATE
          certutil -decode certificate/tempCert.txt certificate/certificate.pfx
          Remove-Item -path certificate -include tempCert.txt
          Import-PfxCertificate -FilePath certificate/certificate.pfx -CertStoreLocation Cert:\CurrentUser\My -Password (ConvertTo-SecureString -String $env:WINDOWS_CERTIFICATE_PASSWORD -Force -AsPlainText)

      - name: Parse Windows Version
        uses: frabert/replace-string-action@v2
        id: winver
        with:
          string: '${{ github.ref_name }}'
          pattern: '^v(\d+).(\d+).(\d+)-?.*$'
          replace-with: '$1.$2.$3.0'
      - name: Insert version ${{ github.ref_name }} / ${{ steps.winver.outputs.replaced }}
        env:
          VERSION: ${{ github.ref_name }}
          WINVER: ${{ steps.winver.outputs.replaced }}
        shell: bash
        run: |
          for f in msix/{codchi.AppInstaller,AppxManifest.xml}; do
              sed -i \
                  "s/@VERSION@/$WINVER/g
                   s/@VERSION_TAG@/$VERSION/g" \
                  $f
          done
      - name: MakeAppx
        run: |
          & "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe" pack /o /d .\msix\ /p codchi.msix

      - name: sign codchi.msix
        run: |
          & "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe" sign -v -debug -n "nixos-devenv" -fd SHA256 -tr http://timestamp.digicert.com -td sha256 .\codchi.msix

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            codchi.msix
            msix/codchi.AppInstaller
            codchi.crt

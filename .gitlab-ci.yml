stages:
  - pre-build
  - build


controller:
  stage: pre-build
  rules:
    # https://stackoverflow.com/questions/69199614/ci-commit-tag-in-if-statemets-of-regular-job
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-?.*$/'
  image: nixpkgs/cachix-flakes
  variables:
    CACHIX_CACHE_NAME: devenv
  cache: &global_cache
    key: master
    paths: 
      - localstore
  before_script: |
    echo "store = `pwd`/localstore" >> /etc/nix/nix.conf
    # cachix use "$CACHIX_CACHE_NAME"
  script: |
    # cachix watch-exec $CACHIX_CACHE_NAME -- nix-build default.nix
    DRV="$(nix build --print-out-paths .#controller-rootfs)"
    cp "`pwd`/localstore$DRV/rootfs.tar.gz" controller.tar.gz
  artifacts:
    paths:
    - ./controller.tar.gz
    expire_in: 20 minutes

msix:
  stage: build
  rules:
    - if: '$CI_COMMIT_TAG =~ /^v\d+\.\d+\.\d+-?.*$/'
  cache: &global_cache
    key: master
    paths: 
      - ghcup
      - cabal
      - cli\dist-newstyle
      - download-secure-files.exe
  tags:
    - shared-windows
    - windows
    - windows-1809
  variables:
    SECURE_FILES_DOWNLOAD_PATH: '.\secrets'
    CABAL_DIR: ${CI_PROJECT_DIR}\cabal
  before_script: |
    # set -x
    # Set-PSDebug -Trace 1
    
    # Set-Variable -Name "time" -Value (date -Format "%H:%m")
    # echo ${time}
    
    # echo "started by ${GITLAB_USER_NAME}"
    
    # Disable the download progress bar which can cause perf issues
    $ProgressPreference = "SilentlyContinue"

    if (!(Test-Path .\ghcup\bin\cabal.exe)) {
      Write-Warning "Installing ghcup"
      curl.exe -o ghcup.ps1 'https://www.haskell.org/ghcup/sh/bootstrap-haskell.ps1'
      Set-Content -Path .\ghcup.ps1 -Value (Get-Content -Path .\ghcup.ps1 | Select-String -Pattern '^Create-Shortcut' -NotMatch)
      Set-ExecutionPolicy Bypass -Scope Process -Force; .\ghcup.ps1 -InstallDir ${CI_PROJECT_DIR} -InBash
    } else {
      Write-Warning "Using cached ghcup"
    }

    .\ghcup\msys64\msys2_shell.cmd -no-start -defterm -mingw64 -here -c 'pacman -S --noconfirm binutils'

    if (!(Test-Path .\download-secure-files.exe)) {
      Write-Warning "Installing download-secure-files"
      curl "https://gitlab.com/gitlab-org/incubation-engineering/mobile-devops/download-secure-files/-/releases/v0.1.9/downloads/download-secure-files-windows-amd64.exe" -o download-secure-files.exe
    } else {
      Write-Warning "Using cached download-secure-files"
    }
    .\download-secure-files.exe

  script: |

    git clone https://gitlab.com/afojhr/devenv-packaging dist

    .\ghcup\msys64\msys2_shell.cmd -no-start -defterm -mingw64 -here -c 'source ./ghcup/env && cd cli && cabal build devenv && cp -f $(cabal exec which devenv) ../dist/msix/devenv.exe && strip ../dist/msix/devenv.exe'

    mkdir -p "dist\msix\VFS\Common AppData\devenv"
    cp "controller.tar.gz" "dist\msix\VFS\Common AppData\devenv\"

    $winVer = ${CI_COMMIT_TAG} | Select-String -Pattern '^v(\d+).(\d+).(\d+)-?.*$' | % {$all, $groups = $_.matches.groups; "$($groups -join ".").0"}
    echo "Publishing devenv.msix with Version $winVer on tag ${CI_COMMIT_TAG}"

    (Get-Content .\dist\msix\devenv.AppInstaller).replace("@VERSION@", $winVer).replace("@VERSION_TAG@", "${CI_COMMIT_TAG}") | Set-Content .\dist\msix\devenv.AppInstaller
    (Get-Content .\dist\msix\AppxManifest.xml).replace("@VERSION@", $winVer) | Set-Content .\dist\msix\AppxManifest.xml
      
    $makeappx = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\makeappx.exe";
    $signtool = "${env:ProgramFiles(x86)}\Windows Kits\10\App Certification Kit\signtool.exe";

    $password = ConvertTo-SecureString -String "${CODE_CERT_PW}" -Force -AsPlainText
    Import-PfxCertificate -FilePath .\secrets\Cert.pfx -CertStoreLocation 'Cert:\LocalMachine\My' -Password $password

    & $makeappx pack /o /d .\dist\msix\ /p devenv.msix

    & $signtool sign -v -debug -sm -n "nixos-devenv" -fd SHA256 -tr http://timestamp.digicert.com -td sha256 .\devenv.msix

    Invoke-RestMethod -Headers @{ "JOB-TOKEN"="${CI_JOB_TOKEN}" } -InFile .\devenv.msix -uri "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/devenv/${CI_COMMIT_TAG}/devenv.msix" -Method put
    Invoke-RestMethod -Headers @{ "JOB-TOKEN"="${CI_JOB_TOKEN}" } -InFile .\dist\msix\devenv.AppInstaller -uri "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/devenv/latest/devenv.AppInstaller" -Method put
    Invoke-RestMethod -Headers @{ "JOB-TOKEN"="${CI_JOB_TOKEN}" } -InFile .\devenv.msix -uri "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/generic/devenv/latest/devenv.msix" -Method put



populate-cache:
  stage: pre-build
  when: manual
  image: nixpkgs/cachix-flakes
  variables:
    CACHIX_CACHE_NAME: nixos-devenv
  before_script: |
    cachix use "$CACHIX_CACHE_NAME"
  script: |
    cachix push "$CACHIX_CACHE_NAME" $(nix build --print-out-paths .#populate-cache)
